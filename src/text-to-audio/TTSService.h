/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TTSService_H
#define TTSService_H

#include <thrift/TDispatchProcessor.h>
#include "TTSService_types.h"

namespace arobot { namespace tts {

class TTSServiceIf {
 public:
  virtual ~TTSServiceIf() {}

  /**
   * \brief Отправка документа в TTS преобразователь.
   * 
   * \param text Текст документа.
   * 
   * @param text
   */
  virtual void textToAudio(const std::string& text) = 0;
};

class TTSServiceIfFactory {
 public:
  typedef TTSServiceIf Handler;

  virtual ~TTSServiceIfFactory() {}

  virtual TTSServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TTSServiceIf* /* handler */) = 0;
};

class TTSServiceIfSingletonFactory : virtual public TTSServiceIfFactory {
 public:
  TTSServiceIfSingletonFactory(const boost::shared_ptr<TTSServiceIf>& iface) : iface_(iface) {}
  virtual ~TTSServiceIfSingletonFactory() {}

  virtual TTSServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TTSServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TTSServiceIf> iface_;
};

class TTSServiceNull : virtual public TTSServiceIf {
 public:
  virtual ~TTSServiceNull() {}
  void textToAudio(const std::string& /* text */) {
    return;
  }
};

typedef struct _TTSService_textToAudio_args__isset {
  _TTSService_textToAudio_args__isset() : text(false) {}
  bool text :1;
} _TTSService_textToAudio_args__isset;

class TTSService_textToAudio_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TTSService_textToAudio_args(const TTSService_textToAudio_args&);
  TTSService_textToAudio_args& operator=(const TTSService_textToAudio_args&);
  TTSService_textToAudio_args() : text() {
  }

  virtual ~TTSService_textToAudio_args() throw();
  std::string text;

  _TTSService_textToAudio_args__isset __isset;

  void __set_text(const std::string& val);

  bool operator == (const TTSService_textToAudio_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const TTSService_textToAudio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTSService_textToAudio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TTSService_textToAudio_args& obj);
};


class TTSService_textToAudio_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TTSService_textToAudio_pargs() throw();
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TTSService_textToAudio_pargs& obj);
};

typedef struct _TTSService_textToAudio_result__isset {
  _TTSService_textToAudio_result__isset() : error(false) {}
  bool error :1;
} _TTSService_textToAudio_result__isset;

class TTSService_textToAudio_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  TTSService_textToAudio_result(const TTSService_textToAudio_result&);
  TTSService_textToAudio_result& operator=(const TTSService_textToAudio_result&);
  TTSService_textToAudio_result() {
  }

  virtual ~TTSService_textToAudio_result() throw();
  ServiceError error;

  _TTSService_textToAudio_result__isset __isset;

  void __set_error(const ServiceError& val);

  bool operator == (const TTSService_textToAudio_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const TTSService_textToAudio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTSService_textToAudio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TTSService_textToAudio_result& obj);
};

typedef struct _TTSService_textToAudio_presult__isset {
  _TTSService_textToAudio_presult__isset() : error(false) {}
  bool error :1;
} _TTSService_textToAudio_presult__isset;

class TTSService_textToAudio_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~TTSService_textToAudio_presult() throw();
  ServiceError error;

  _TTSService_textToAudio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TTSService_textToAudio_presult& obj);
};

class TTSServiceClient : virtual public TTSServiceIf {
 public:
  TTSServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TTSServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void textToAudio(const std::string& text);
  void send_textToAudio(const std::string& text);
  void recv_textToAudio();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TTSServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TTSServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TTSServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_textToAudio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TTSServiceProcessor(boost::shared_ptr<TTSServiceIf> iface) :
    iface_(iface) {
    processMap_["textToAudio"] = &TTSServiceProcessor::process_textToAudio;
  }

  virtual ~TTSServiceProcessor() {}
};

class TTSServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TTSServiceProcessorFactory(const ::boost::shared_ptr< TTSServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TTSServiceIfFactory > handlerFactory_;
};

class TTSServiceMultiface : virtual public TTSServiceIf {
 public:
  TTSServiceMultiface(std::vector<boost::shared_ptr<TTSServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TTSServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TTSServiceIf> > ifaces_;
  TTSServiceMultiface() {}
  void add(boost::shared_ptr<TTSServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void textToAudio(const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textToAudio(text);
    }
    ifaces_[i]->textToAudio(text);
  }

};

}} // namespace

#endif
