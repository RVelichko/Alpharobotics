/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TTSService_TYPES_H
#define TTSService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace arobot { namespace tts {

class ServiceError;

typedef struct _ServiceError__isset {
  _ServiceError__isset() : what(false) {}
  bool what :1;
} _ServiceError__isset;

class ServiceError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServiceError(const ServiceError&);
  ServiceError& operator=(const ServiceError&);
  ServiceError() : what() {
  }

  virtual ~ServiceError() throw();
  std::string what;

  _ServiceError__isset __isset;

  void __set_what(const std::string& val);

  bool operator == (const ServiceError & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    return true;
  }
  bool operator != (const ServiceError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServiceError& obj);
};

void swap(ServiceError &a, ServiceError &b);

}} // namespace

#endif
